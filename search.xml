<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>全球房价看板</title>
      <link href="2020/11/28/%E5%85%A8%E7%90%83%E6%88%BF%E4%BB%B7%E7%9C%8B%E6%9D%BF/"/>
      <url>2020/11/28/%E5%85%A8%E7%90%83%E6%88%BF%E4%BB%B7%E7%9C%8B%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<iframe width="1200" height="747" src="https://app.powerbi.com/view?r=eyJrIjoiYTFmMTBmNjAtMWU4Yy00OGMyLTkyMDktYTMxMzY5YTgxOTg5IiwidCI6IjU1NmQ2MDg2LTVmMjgtNDQwNC1iNjhhLWJhZDRlYTM1YzcxYSIsImMiOjN9&pageName=ReportSection8e2e543760e2348c50e6" frameborder="0" allowFullScreen="true"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
            <tag> 房地产 </tag>
            
            <tag> 预测 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BTBI-Covid19疫情可视化仪表板</title>
      <link href="2020/11/28/BTBI-Covid19/"/>
      <url>2020/11/28/BTBI-Covid19/</url>
      
        <content type="html"><![CDATA[<p>本作获阿里云-天池疫情可视化大赛银奖</p><iframe width="1200" height="747" src="https://app.powerbi.com/view?r=eyJrIjoiY2M1ZTZlMTgtYzRiZi00ODczLTk0YWYtZWJhOGU3ZDI2Y2Q5IiwidCI6IjU1NmQ2MDg2LTVmMjgtNDQwNC1iNjhhLWJhZDRlYTM1YzcxYSIsImMiOjN9&pageName=ReportSection7e55272760a11734e04b" frameborder="0" allowFullScreen="true"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房天下房源分析仪表板</title>
      <link href="2020/11/28/%E6%88%BF%E5%A4%A9%E4%B8%8B%E6%88%BF%E6%BA%90%E5%88%86%E6%9E%90%E4%BB%AA%E8%A1%A8%E6%9D%BF/"/>
      <url>2020/11/28/%E6%88%BF%E5%A4%A9%E4%B8%8B%E6%88%BF%E6%BA%90%E5%88%86%E6%9E%90%E4%BB%AA%E8%A1%A8%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>本作品数据来源于2019年房天下爬虫，共计13万行数据。</p><iframe width="1200" height="747" src="https://app.powerbi.com/view?r=eyJrIjoiMjMxNWU5OTctYWI5OS00ZWFjLWJiZjUtNjQwMTNjNmQzNzVkIiwidCI6IjU1NmQ2MDg2LTVmMjgtNDQwNC1iNjhhLWJhZDRlYTM1YzcxYSIsImMiOjN9&pageName=ReportSectionea7b64dc6368aa8e9e60" frameborder="0" allowFullScreen="true"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
            <tag> 房地产 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack Overflow 2019年调查报告分析（下）</title>
      <link href="2020/11/28/Stack-Overflow-2019%E5%B9%B4%E8%B0%83%E6%9F%A5%E6%8A%A5%E5%91%8A%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>2020/11/28/Stack-Overflow-2019%E5%B9%B4%E8%B0%83%E6%9F%A5%E6%8A%A5%E5%91%8A%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<iframe width="747" height="1500" src="https://app.powerbi.com/view?r=eyJrIjoiMGUyNjQzZDgtMjc5MC00ZDlmLTlmYzAtNTBmMTIxOGU1YjEyIiwidCI6IjU1NmQ2MDg2LTVmMjgtNDQwNC1iNjhhLWJhZDRlYTM1YzcxYSIsImMiOjN9&pageName=ReportSection" frameborder="0" allowFullScreen="true"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
            <tag> Stack Overflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stack Overflow 2019年调查报告分析（上）</title>
      <link href="2020/11/28/Stack-Overflow-2019%E5%B9%B4%E8%B0%83%E6%9F%A5%E6%8A%A5%E5%91%8A%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>2020/11/28/Stack-Overflow-2019%E5%B9%B4%E8%B0%83%E6%9F%A5%E6%8A%A5%E5%91%8A%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>本作数据来源于stackoverflow2019年调查报告</p><iframe width="1200" height="747" src="https://app.powerbi.com/view?r=eyJrIjoiYjZkN2VlNzItNmRhNy00NjEyLTgxMmQtOGQ5MDc4OTM3OWNkIiwidCI6IjU1NmQ2MDg2LTVmMjgtNDQwNC1iNjhhLWJhZDRlYTM1YzcxYSIsImMiOjN9&pageName=ReportSection" frameborder="0" allowFullScreen="true"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
            <tag> Stack Overflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全球设计公司100强</title>
      <link href="2020/11/28/%E5%85%A8%E7%90%83%E5%AE%A4%E5%86%85%E8%AE%BE%E8%AE%A1%E5%85%AC%E5%8F%B8100%E5%BC%BA/"/>
      <url>2020/11/28/%E5%85%A8%E7%90%83%E5%AE%A4%E5%86%85%E8%AE%BE%E8%AE%A1%E5%85%AC%E5%8F%B8100%E5%BC%BA/</url>
      
        <content type="html"><![CDATA[<iframe width="1200" height="700" src="https://app.powerbi.com/view?r=eyJrIjoiMTljNGQ2OTUtYzE5NS00NjYxLWIzZDEtMTBhZGNhM2QwNTcwIiwidCI6IjU1NmQ2MDg2LTVmMjgtNDQwNC1iNjhhLWJhZDRlYTM1YzcxYSIsImMiOjN9&pageName=ReportSection143fe63b32bb3df1d9aa" frameborder="0" allowFullScreen="true"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家居行业自动化分析报告</title>
      <link href="2020/11/28/%E5%AE%B6%E5%B1%85%E8%A1%8C%E4%B8%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/"/>
      <url>2020/11/28/%E5%AE%B6%E5%B1%85%E8%A1%8C%E4%B8%9A%E8%87%AA%E5%8A%A8%E5%8C%96%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<p>本作数据源于tushare接口，自动化生成2500多文字的总结。涵盖同业分析、公司概况、三大报表分析和杜邦分析六大模块。其中杜邦分析包含同比分析以及情景分析。</p><iframe width="1200" height="747" src="https://app.powerbi.com/view?r=eyJrIjoiN2NmNDQzN2EtODA5Yy00YWUyLTliMTktNjFiNzg4M2E3OWEyIiwidCI6IjU1NmQ2MDg2LTVmMjgtNDQwNC1iNjhhLWJhZDRlYTM1YzcxYSIsImMiOjN9&pageName=ReportSection5bd50608d0ceb0429814" frameborder="0" allowFullScreen="true"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
            <tag> tushare </tag>
            
            <tag> 家居 </tag>
            
            <tag> 财务分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/28/hello-world/"/>
      <url>2020/11/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DAX优化20招</title>
      <link href="2020/11/27/DAX%20Optimization/"/>
      <url>2020/11/27/DAX%20Optimization/</url>
      
        <content type="html"><![CDATA[<p>Power BI 性能问题通常是由于数据分析表达式（DAX）语言不够理想而导致的。低效率的DAX会减慢处理速度，阻塞高级容量，增加等待时间，并妨碍刷新和报告加载时间。</p><h3 id="1-在优化DAX之前清除DAX缓存"><a href="#1-在优化DAX之前清除DAX缓存" class="headerlink" title="1. 在优化DAX之前清除DAX缓存"></a>1. 在优化DAX之前清除DAX缓存</h3><ul><li>缓存由内部VertiPaq查询产生。</li><li>从DAX Studio中清除缓存。</li><li>重置缓存可让您衡量有效的性能提升。</li></ul><h3 id="2-格式化代码"><a href="#2-格式化代码" class="headerlink" title="2. 格式化代码"></a>2. 格式化代码</h3><ul><li>使用DAX Formatter。</li><li>格式化的代码更易于阅读和维护。</li></ul><h3 id="3-不要将BLANK值更改为零或其他字符串"><a href="#3-不要将BLANK值更改为零或其他字符串" class="headerlink" title="3. 不要将BLANK值更改为零或其他字符串"></a>3. 不要将BLANK值更改为零或其他字符串</h3><ul><li>通常的做法是用零或其他字符串替换空格。</li><li>但是，Power BI<em>自动</em>过滤所有带有空白值的行。当从具有大量数据的表中查看结果时，这会限制结果集并防止性能下降。</li><li>如果更换了空白，则Power BI不会过滤不需要的行，从而对性能产生负面影响。</li></ul><h3 id="4-始终使用DISTINCT（）和VALUES（）函数"><a href="#4-始终使用DISTINCT（）和VALUES（）函数" class="headerlink" title="4. 始终使用DISTINCT（）和VALUES（）函数"></a>4. 始终使用DISTINCT（）和VALUES（）函数</h3><ul><li>DISTINCT（）：不返回由于完整性冲突而添加的空白。仅当DISTINCT（）函数是原始数据的一部分时，才包含空格。</li><li>VALUES（）：包括Power BI由于引用完整性违规而添加的任何空白。</li><li>如果Power BI发现参照完整性违规，则会在列中添加空白值。</li><li>对于直接查询，因为Power BI无法检查违规，所以Power BI在列中添加了空白值。</li><li>DISTINCT（）和VALUES（）函数不同：</li><li>在整个报表中，保持DISTINCT（）和VALUES（）函数的用法一致。</li><li>如果没有空白值，Power BI建议使用VALUES（）函数。</li></ul><h3 id="5-使用ISBLANK（）代替-Blank（）"><a href="#5-使用ISBLANK（）代替-Blank（）" class="headerlink" title="5. 使用ISBLANK（）代替= Blank（）"></a>5. 使用ISBLANK（）代替= Blank（）</h3><ul><li>使用内置函数ISBLANK（）来检查任何空白值，而不是使用比较运算符= Blank（）。</li></ul><h3 id="6-使用-0而不是检查ISBLANK（）-0"><a href="#6-使用-0而不是检查ISBLANK（）-0" class="headerlink" title="6. 使用= 0而不是检查ISBLANK（）|| = 0"></a>6. 使用= 0而不是检查ISBLANK（）|| = 0</h3><ul><li>Power BI中的BLANK值与列数据类型的基值相关联</li><li>对于整数，BLANK值对应于零，对于字符串列，BLANK值对应于“（空字符串）”，对于日期字段，BLANK值对应于“ 1-1–1900”。</li><li>ISBLANK（）|| = 0时执行两个检查：ISBLANK（）并与零进行比较。</li><li>Use = 0，在内部执行两项检查。</li><li>要仅执行零检查，请使用IN运算符。</li></ul><h3 id="7-使用SELECTEDVALUE（）代替HASONEVALUE（）"><a href="#7-使用SELECTEDVALUE（）代替HASONEVALUE（）" class="headerlink" title="7. 使用SELECTEDVALUE（）代替HASONEVALUE（）"></a>7. 使用SELECTEDVALUE（）代替HASONEVALUE（）</h3><ul><li>在应用切片器和过滤器后，通常使用HASONEVALUE（）检查一列中是否只有一个值。您还必须使用VALUES（ColumnName）DAX函数来检索该单个值。</li><li>SELECTEDVALUE（）在内部执行上述步骤。如果有一个值，它将自动检索单个值；如果有多个可用值，它将自动返回空白。</li></ul><h3 id="8-使用SELECTEDVALUE（）而不是VALUES（）"><a href="#8-使用SELECTEDVALUE（）而不是VALUES（）" class="headerlink" title="8. 使用SELECTEDVALUE（）而不是VALUES（）"></a>8. 使用SELECTEDVALUE（）而不是VALUES（）</h3><ul><li>如果遇到多个值，VALUES（）函数将返回错误。通常，用户使用错误功能解决错误，这会对性能产生负面影响。</li><li>而不是使用VALUES（），请使用SELECTEDVALUE（）。SELECTEDVALUE（）函数更安全，如果遇到多个值，则返回空白。</li></ul><h3 id="9-使用变量而不是在IF分支内重复测量"><a href="#9-使用变量而不是在IF分支内重复测量" class="headerlink" title="9. 使用变量而不是在IF分支内重复测量"></a>9. 使用变量而不是在IF分支内重复测量</h3><ul><li><p>由于度量是连续计算的，因此[Total Rows]表达式将计算两次：首先用于条件检查，然后用于真实条件表达式。</p></li><li><p>不正确的DAX：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">Ratio</span> = <span class="keyword">IF</span>([<span class="keyword">Total</span> Rows] &gt; 10, <span class="built_in">SUM</span>(Revenue) /[<span class="keyword">Total</span> Rows], 0)`</span><br></pre></td></tr></table></figure></li><li><p>正确的DAX：</p></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VAR</span> totalRows = [<span class="keyword">Total</span> Rows]; <span class="keyword">Ratio</span> = <span class="keyword">IF</span>(totalRows &gt; 10, <span class="built_in">SUM</span>(Revenue) / totalRows,0)</span><br></pre></td></tr></table></figure><ul><li><p>您可以将结果度量值存储在变量中，而不必多次计算相同的表达式。</p></li><li><p>您可以在任何需要的地方使用变量引用。相同的变量过程适用于您调用相同度量的所有实例。</p></li><li><p>变量可以帮助您避免重复功能。</p></li><li><p>注意：请注意，变量实际上是常量。</p></li></ul><h3 id="10-将（ab）-b与变量一起使用，而不是a-b-—-1或a-b-100-100"><a href="#10-将（ab）-b与变量一起使用，而不是a-b-—-1或a-b-100-100" class="headerlink" title="10. 将（ab）/ b与变量一起使用，而不是a / b — 1或a / b * 100-100"></a>10. 将（ab）/ b与变量一起使用，而不是a / b — 1或a / b * 100-100</h3><ul><li>通常使用a / b_1来计算比率并避免重复进行度量计算。</li><li>但是，通过使用变量并使用（ab）/ b计算比率，可以实现相同的性能。</li><li>这就是为什么您应该使用（ab）/ b的原因： <code>If both a and b are blank values, then (a-b)/b returns a blank value and Power BI will filter the values out. a/b — 1 would return -1 as the result because both a and b are integers.</code></li><li>参考：sqlbi</li></ul><h3 id="11-停止使用IFERROR（）和ISERROR（）"><a href="#11-停止使用IFERROR（）和ISERROR（）" class="headerlink" title="11. 停止使用IFERROR（）和ISERROR（）"></a>11. 停止使用IFERROR（）和ISERROR（）</h3><ul><li>当应用FIND（）和SEARCH（）函数时，IFERROR（）和ISERROR（）函数在Excel中得到了广泛使用。它们是必需的，因为如果查询未获得所需的结果，则FIND（）和SEARCH（）返回错误。</li><li>IFERROR（）和ISERROR（）函数强制Power BI引擎对每一行执行逐步执行，以检查错误。当前没有任何方法可以直接说明哪一行返回了错误。</li><li>FIND（）和SEARCH（）DAX函数提供了查询可以传递的额外参数。如果不存在搜索字符串，则返回该参数。</li><li>FIND（）和SEARCH（）DAX函数检查是否返回了多个值。它们还确保没有任何东西被零除。通过使用正确的DAX函数（例如DIVIDE（）和SELECTEDVALUE（）），可以避免使用FIND（）和SEARCH（）DAX函数。DIVIDE（）和SELECTEDVALUE（）函数在内部执行错误检查并返回预期结果。</li><li>您始终可以使用DAX表达式，使其永远不会返回错误。</li></ul><h3 id="12-使用DIVIDE（）代替"><a href="#12-使用DIVIDE（）代替" class="headerlink" title="12. 使用DIVIDE（）代替/"></a>12. 使用DIVIDE（）代替/</h3><ul><li>/如果分母为零，则引发异常。</li><li>DIVIDE（）函数在内部执行检查以验证分母是否为零。如果是，它将返回第三个（额外）参数中指定的值。</li><li>对于“无效分母”的情况，请在使用“ /”运算符时使用IF条件。</li><li>注意：如果确定分母值不为零，则最好使用“ /”运算符而不进行IF检查。DIVIDE（）函数将始终在内部执行IF检查。</li></ul><h3 id="13-不要在SUMMARIZE（）中使用标量变量"><a href="#13-不要在SUMMARIZE（）中使用标量变量" class="headerlink" title="13. 不要在SUMMARIZE（）中使用标量变量"></a>13. 不要在SUMMARIZE（）中使用标量变量</h3><ul><li>传统上，SUMMARIZE（）函数用于对列进行分组并返回结果聚合。但是，SUMMARIZECOLUMNS（）函数是较新的且已优化。改用它。</li><li>仅将SUMMARIZE（）用于表的分组元素，而没有任何关联的度量或聚合。例如： <code>SUMMARIZE(Table, Column1, Column2)</code></li></ul><h3 id="14-使用KEEPFILTERS（）代替FILTER（T）"><a href="#14-使用KEEPFILTERS（）代替FILTER（T）" class="headerlink" title="14. 使用KEEPFILTERS（）代替FILTER（T）"></a>14. 使用KEEPFILTERS（）代替FILTER（T）</h3><ul><li>FILTER函数会覆盖通过切片器应用的列上的任何现有过滤器集。</li><li>KEEPFILTER函数不会覆盖现有的过滤器集。而是使用两者中存在的值的交集，从而保持当前上下文。当您想要在执行计算时维护切片器应用的任何过滤器或在报告级别上使用此过滤器。</li></ul><h3 id="15-使用FILTER（all（ColumnName））代替FILTER（values（））或FILTER（T）"><a href="#15-使用FILTER（all（ColumnName））代替FILTER（values（））或FILTER（T）" class="headerlink" title="15. 使用FILTER（all（ColumnName））代替FILTER（values（））或FILTER（T）"></a>15. 使用FILTER（all（ColumnName））代替FILTER（values（））或FILTER（T）</h3><ul><li><p>bid</p></li><li><p>sqlbi</p></li><li><p>若要计算独立于应用于列的任何过滤器的度量，请将All（ColumnName）函数与FILTER函数结合使用，而不要使用Table或VALUE（）。例如：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALCULATE([Total Sales], FILTER(<span class="name">ALL</span>(<span class="name">Products</span>[Color]), Color = ‘Red’))</span><br></pre></td></tr></table></figure></li><li><p>如果不需要保留当前上下文，则将ALL与FILTER函数一起使用。</p></li><li><p>使用表达式而不是FILTER函数直接应用过滤器的行为与上述相同。此方法在内部使用过滤器中的ALL函数进行转换。例如： <code>CALCULATE([Total Sales], FILTER(ALL(Products[Color]), Color = ‘Red’))</code></p></li><li><p>出于可伸缩性考虑，始终将过滤器应用于所需的列而不是应用于整个表总是更好。</p></li></ul><h3 id="16-避免在度量表达式中使用AddColumns（）函数"><a href="#16-避免在度量表达式中使用AddColumns（）函数" class="headerlink" title="16. 避免在度量表达式中使用AddColumns（）函数"></a>16. 避免在度量表达式中使用AddColumns（）函数</h3><ul><li>默认情况下，度量是迭代计算的。</li><li>如果度量定义使用诸如AddColumns（）之类的迭代函数，则Power BI将创建嵌套的迭代，这会对报表性能产生负面影响。</li></ul><h3 id="17-根据列值使用正确的数据类型"><a href="#17-根据列值使用正确的数据类型" class="headerlink" title="17. 根据列值使用正确的数据类型"></a>17. 根据列值使用正确的数据类型</h3><ul><li>如果一列中只有两个不同的值，请检查是否可以将其转换为布尔数据类型（真/假）。</li><li>当您有大量的行时，这可以加快处理速度。</li></ul><h3 id="18-使用COUNTROWS而不是COUNT："><a href="#18-使用COUNTROWS而不是COUNT：" class="headerlink" title="18. 使用COUNTROWS而不是COUNT："></a>18. 使用COUNTROWS而不是COUNT：</h3><ul><li>使用COUNT函数对列值进行计数，或者我们可以使用COUNTROWS函数对表行进行计数。只要计数的列不包含空白，这两个函数将达到相同的结果。 <code>Sales Orders = COUNT(Sales [OrderDate]) Sales Orders = COUNTROWS(Sales)</code></li><li>第二个度量定义更好的三个原因：</li><li>参考：DAX-CountRows<ul><li>它效率更高，并且性能会更好。</li><li>它不考虑表的任何列中包含的空白。</li><li>公式的意图更加清晰和自我描述。</li></ul></li></ul><h3 id="19-将SEARCH（）与最后一个参数一起使用"><a href="#19-将SEARCH（）与最后一个参数一起使用" class="headerlink" title="19. 将SEARCH（）与最后一个参数一起使用"></a>19. 将SEARCH（）与最后一个参数一起使用</h3><ul><li>如果未找到搜索字符串，则SEARCH（）DAX函数接受最后一个参数作为查询必须返回的值。</li><li>您应该始终使用SEARCH（）函数，而不是与SEARCH（）一起使用Error函数。</li></ul><h3 id="20-ALL-vs-ALLExcept"><a href="#20-ALL-vs-ALLExcept" class="headerlink" title="20. ALL vs.ALLExcept"></a>20. ALL vs.ALLExcept</h3><ul><li>只要“豁免”列是数据透视表上的列，ALLEXCEPT（）的行为就与ALL（），VALUES（）完全一样。</li><li>ALLEXCEPT（）不会在不在枢轴上的列上保留枢轴上下文。</li><li>使用VALUES（）时，使用ALL（）代替ALLEXCEPT（）。</li></ul><p>**<br>**</p><p><strong>—— —— —— —— —— —— —— —— —— —— —— —— —— —— —— ——</strong> <strong>—</strong></p><p><em>注：本文翻译自“<a href="https://maqsoftware.com/expertise/powerbi/dax-best-practices%E2%80%9D">https://maqsoftware.com/expertise/powerbi/dax-best-practices”</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
