<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>BTBI-Covid19疫情可视化仪表板</title>
      <link href="2020/11/28/BTBI-Covid19/"/>
      <url>2020/11/28/BTBI-Covid19/</url>
      
        <content type="html"><![CDATA[<p>本作获阿里云-天池疫情可视化大赛银奖</p><iframe width="1200" height="747" src="https://app.powerbi.com/view?r=eyJrIjoiY2M1ZTZlMTgtYzRiZi00ODczLTk0YWYtZWJhOGU3ZDI2Y2Q5IiwidCI6IjU1NmQ2MDg2LTVmMjgtNDQwNC1iNjhhLWJhZDRlYTM1YzcxYSIsImMiOjN9&pageName=ReportSection7e55272760a11734e04b" frameborder="0" allowFullScreen="true"></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/28/hello-world/"/>
      <url>2020/11/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>DAX优化20招！！！</title>
      <link href="2020/11/27/DAX%20Optimization/"/>
      <url>2020/11/27/DAX%20Optimization/</url>
      
        <content type="html"><![CDATA[<p>Power BI 性能问题通常是由于数据分析表达式（DAX）语言不够理想而导致的。低效率的DAX会减慢处理速度，阻塞高级容量，增加等待时间，并妨碍刷新和报告加载时间。</p><h3 id="1-在优化DAX之前清除DAX缓存"><a href="#1-在优化DAX之前清除DAX缓存" class="headerlink" title="1. 在优化DAX之前清除DAX缓存"></a>1. 在优化DAX之前清除DAX缓存</h3><ul><li>缓存由内部VertiPaq查询产生。</li><li>从DAX Studio中清除缓存。</li><li>重置缓存可让您衡量有效的性能提升。</li></ul><h3 id="2-格式化代码"><a href="#2-格式化代码" class="headerlink" title="2. 格式化代码"></a>2. 格式化代码</h3><ul><li>使用DAX Formatter。</li><li>格式化的代码更易于阅读和维护。</li></ul><h3 id="3-不要将BLANK值更改为零或其他字符串"><a href="#3-不要将BLANK值更改为零或其他字符串" class="headerlink" title="3. 不要将BLANK值更改为零或其他字符串"></a>3. 不要将BLANK值更改为零或其他字符串</h3><ul><li>通常的做法是用零或其他字符串替换空格。</li><li>但是，Power BI<em>自动</em>过滤所有带有空白值的行。当从具有大量数据的表中查看结果时，这会限制结果集并防止性能下降。</li><li>如果更换了空白，则Power BI不会过滤不需要的行，从而对性能产生负面影响。</li></ul><h3 id="4-始终使用DISTINCT（）和VALUES（）函数"><a href="#4-始终使用DISTINCT（）和VALUES（）函数" class="headerlink" title="4. 始终使用DISTINCT（）和VALUES（）函数"></a>4. 始终使用DISTINCT（）和VALUES（）函数</h3><ul><li>DISTINCT（）：不返回由于完整性冲突而添加的空白。仅当DISTINCT（）函数是原始数据的一部分时，才包含空格。</li><li>VALUES（）：包括Power BI由于引用完整性违规而添加的任何空白。</li><li>如果Power BI发现参照完整性违规，则会在列中添加空白值。</li><li>对于直接查询，因为Power BI无法检查违规，所以Power BI在列中添加了空白值。</li><li>DISTINCT（）和VALUES（）函数不同：</li><li>在整个报表中，保持DISTINCT（）和VALUES（）函数的用法一致。</li><li>如果没有空白值，Power BI建议使用VALUES（）函数。</li></ul><h3 id="5-使用ISBLANK（）代替-Blank（）"><a href="#5-使用ISBLANK（）代替-Blank（）" class="headerlink" title="5. 使用ISBLANK（）代替= Blank（）"></a>5. 使用ISBLANK（）代替= Blank（）</h3><ul><li>使用内置函数ISBLANK（）来检查任何空白值，而不是使用比较运算符= Blank（）。</li></ul><h3 id="6-使用-0而不是检查ISBLANK（）-0"><a href="#6-使用-0而不是检查ISBLANK（）-0" class="headerlink" title="6. 使用= 0而不是检查ISBLANK（）|| = 0"></a>6. 使用= 0而不是检查ISBLANK（）|| = 0</h3><ul><li>Power BI中的BLANK值与列数据类型的基值相关联</li><li>对于整数，BLANK值对应于零，对于字符串列，BLANK值对应于“（空字符串）”，对于日期字段，BLANK值对应于“ 1-1–1900”。</li><li>ISBLANK（）|| = 0时执行两个检查：ISBLANK（）并与零进行比较。</li><li>Use = 0，在内部执行两项检查。</li><li>要仅执行零检查，请使用IN运算符。</li></ul><h3 id="7-使用SELECTEDVALUE（）代替HASONEVALUE（）"><a href="#7-使用SELECTEDVALUE（）代替HASONEVALUE（）" class="headerlink" title="7. 使用SELECTEDVALUE（）代替HASONEVALUE（）"></a>7. 使用SELECTEDVALUE（）代替HASONEVALUE（）</h3><ul><li>在应用切片器和过滤器后，通常使用HASONEVALUE（）检查一列中是否只有一个值。您还必须使用VALUES（ColumnName）DAX函数来检索该单个值。</li><li>SELECTEDVALUE（）在内部执行上述步骤。如果有一个值，它将自动检索单个值；如果有多个可用值，它将自动返回空白。</li></ul><h3 id="8-使用SELECTEDVALUE（）而不是VALUES（）"><a href="#8-使用SELECTEDVALUE（）而不是VALUES（）" class="headerlink" title="8. 使用SELECTEDVALUE（）而不是VALUES（）"></a>8. 使用SELECTEDVALUE（）而不是VALUES（）</h3><ul><li>如果遇到多个值，VALUES（）函数将返回错误。通常，用户使用错误功能解决错误，这会对性能产生负面影响。</li><li>而不是使用VALUES（），请使用SELECTEDVALUE（）。SELECTEDVALUE（）函数更安全，如果遇到多个值，则返回空白。</li></ul><h3 id="9-使用变量而不是在IF分支内重复测量"><a href="#9-使用变量而不是在IF分支内重复测量" class="headerlink" title="9. 使用变量而不是在IF分支内重复测量"></a>9. 使用变量而不是在IF分支内重复测量</h3><ul><li><p>由于度量是连续计算的，因此[Total Rows]表达式将计算两次：首先用于条件检查，然后用于真实条件表达式。</p></li><li><p>不正确的DAX：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`<span class="keyword">Ratio</span> = <span class="keyword">IF</span>([<span class="keyword">Total</span> Rows] &gt; 10, <span class="built_in">SUM</span>(Revenue) /[<span class="keyword">Total</span> Rows], 0)`</span><br></pre></td></tr></table></figure></li><li><p>正确的DAX：</p></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">VAR</span> totalRows = [<span class="keyword">Total</span> Rows]; <span class="keyword">Ratio</span> = <span class="keyword">IF</span>(totalRows &gt; 10, <span class="built_in">SUM</span>(Revenue) / totalRows,0)</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br></pre></td></tr></table></figure><p>=======<br>  <figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; fd75cf0b0009d0be312bd30159d1ac50816e1163</span><br><span class="line"><span class="literal">- 您可以将结果度量值存储在变量中，而不必多次计算相同的表达式。</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- 您可以在任何需要的地方使用变量引用。相同的变量过程适用于您调用相同度量的所有实例。</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- 变量可以帮助您避免重复功能。</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- 注意：请注意，变量实际上是常量。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 10. 将（ab）/ b与变量一起使用，而不是a / b — 1或a / b * 100-100</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- 通常使用a / b_1来计算比率并避免重复进行度量计算。</span></span><br><span class="line"><span class="literal">- 但是，通过使用变量并使用（ab）/ b计算比率，可以实现相同的性能。</span></span><br><span class="line"><span class="literal">- 这就是为什么您应该使用（ab）/ b的原因： `If both a and b are blank values, then (a-b)/b returns a blank value and Power BI will filter the values out. a/b — 1 would return -1 as the result because both a and b are integers.`</span></span><br><span class="line"><span class="literal">- 参考：sqlbi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 11. 停止使用IFERROR（）和ISERROR（）</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- 当应用FIND（）和SEARCH（）函数时，IFERROR（）和ISERROR（）函数在Excel中得到了广泛使用。它们是必需的，因为如果查询未获得所需的结果，则FIND（）和SEARCH（）返回错误。</span></span><br><span class="line"><span class="literal">- IFERROR（）和ISERROR（）函数强制Power BI引擎对每一行执行逐步执行，以检查错误。当前没有任何方法可以直接说明哪一行返回了错误。</span></span><br><span class="line"><span class="literal">- FIND（）和SEARCH（）DAX函数提供了查询可以传递的额外参数。如果不存在搜索字符串，则返回该参数。</span></span><br><span class="line"><span class="literal">- FIND（）和SEARCH（）DAX函数检查是否返回了多个值。它们还确保没有任何东西被零除。通过使用正确的DAX函数（例如DIVIDE（）和SELECTEDVALUE（）），可以避免使用FIND（）和SEARCH（）DAX函数。DIVIDE（）和SELECTEDVALUE（）函数在内部执行错误检查并返回预期结果。</span></span><br><span class="line"><span class="literal">- 您始终可以使用DAX表达式，使其永远不会返回错误。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 12. 使用DIVIDE（）代替/</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- /如果分母为零，则引发异常。</span></span><br><span class="line"><span class="literal">- DIVIDE（）函数在内部执行检查以验证分母是否为零。如果是，它将返回第三个（额外）参数中指定的值。</span></span><br><span class="line"><span class="literal">- 对于“无效分母”的情况，请在使用“ /”运算符时使用IF条件。</span></span><br><span class="line"><span class="literal">- 注意：如果确定分母值不为零，则最好使用“ /”运算符而不进行IF检查。DIVIDE（）函数将始终在内部执行IF检查。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 13. 不要在SUMMARIZE（）中使用标量变量</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- 传统上，SUMMARIZE（）函数用于对列进行分组并返回结果聚合。但是，SUMMARIZECOLUMNS（）函数是较新的且已优化。改用它。</span></span><br><span class="line"><span class="literal">- 仅将SUMMARIZE（）用于表的分组元素，而没有任何关联的度量或聚合。例如： `SUMMARIZE(Table, Column1, Column2)`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 14. 使用KEEPFILTERS（）代替FILTER（T）</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- FILTER函数会覆盖通过切片器应用的列上的任何现有过滤器集。</span></span><br><span class="line"><span class="literal">- KEEPFILTER函数不会覆盖现有的过滤器集。而是使用两者中存在的值的交集，从而保持当前上下文。当您想要在执行计算时维护切片器应用的任何过滤器或在报告级别上使用此过滤器。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 15. 使用FILTER（all（ColumnName））代替FILTER（values（））或FILTER（T）</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- bid</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- sqlbi</span></span><br><span class="line"></span><br><span class="line"><span class="literal">- 若要计算独立于应用于列的任何过滤器的度量，请将All（ColumnName）函数与FILTER函数结合使用，而不要使用Table或VALUE（）。例如：</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>  CALCULATE([Total Sales], FILTER(ALL(Products[Color]), Color = ‘Red’))<br>  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> 如果不需要保留当前上下文，则将ALL与FILTER函数一起使用。</span><br><span class="line"><span class="bullet">-</span> 使用表达式而不是FILTER函数直接应用过滤器的行为与上述相同。此方法在内部使用过滤器中的ALL函数进行转换。例如： <span class="code">`CALCULATE([Total Sales], FILTER(ALL(Products[Color]), Color = ‘Red’))`</span></span><br><span class="line"><span class="bullet">-</span> 出于可伸缩性考虑，始终将过滤器应用于所需的列而不是应用于整个表总是更好。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">### 16. 避免在度量表达式中使用AddColumns（）函数</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 默认情况下，度量是迭代计算的。</span><br><span class="line"><span class="bullet">-</span> 如果度量定义使用诸如AddColumns（）之类的迭代函数，则Power BI将创建嵌套的迭代，这会对报表性能产生负面影响。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">### 17. 根据列值使用正确的数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 如果一列中只有两个不同的值，请检查是否可以将其转换为布尔数据类型（真/假）。</span><br><span class="line"><span class="bullet">-</span> 当您有大量的行时，这可以加快处理速度。</span><br><span class="line"></span><br><span class="line"><span class="section">### 18. 使用COUNTROWS而不是COUNT：</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 使用COUNT函数对列值进行计数，或者我们可以使用COUNTROWS函数对表行进行计数。只要计数的列不包含空白，这两个函数将达到相同的结果。 <span class="code">`Sales Orders = COUNT(Sales [OrderDate]) Sales Orders = COUNTROWS(Sales)`</span></span><br><span class="line"><span class="bullet">-</span> 第二个度量定义更好的三个原因：</span><br><span class="line"><span class="bullet">-</span> 参考：DAX-CountRows</span><br><span class="line"><span class="bullet">  -</span> 它效率更高，并且性能会更好。</span><br><span class="line"><span class="bullet">  -</span> 它不考虑表的任何列中包含的空白。</span><br><span class="line"><span class="bullet">  -</span> 公式的意图更加清晰和自我描述。</span><br><span class="line"></span><br><span class="line"><span class="section">### 19. 将SEARCH（）与最后一个参数一起使用</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 如果未找到搜索字符串，则SEARCH（）DAX函数接受最后一个参数作为查询必须返回的值。</span><br><span class="line"><span class="bullet">-</span> 您应该始终使用SEARCH（）函数，而不是与SEARCH（）一起使用Error函数。</span><br><span class="line"></span><br><span class="line"><span class="section">### 20. ALL vs.ALLExcept</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 只要“豁免”列是数据透视表上的列，ALLEXCEPT（）的行为就与ALL（），VALUES（）完全一样。</span><br><span class="line"><span class="bullet">-</span> ALLEXCEPT（）不会在不在枢轴上的列上保留枢轴上下文。</span><br><span class="line"><span class="bullet">-</span> 使用VALUES（）时，使用ALL（）代替ALLEXCEPT（）。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="strong">**</span></span><br><span class="line"><span class="strong">**</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**—— —— —— —— —— —— —— —— —— —— —— —— —— —— —— ——**</span> <span class="strong">**—**</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*注：本文翻译自“https://maqsoftware.com/expertise/powerbi/dax-best-practices”*</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> Power BI </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
